name: CI/CD
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pytest:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: "poetry"

      - name: Install Poetry
        run: |
          pip install pipx
          pipx ensurepath
          pipx install poetry

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run tests
        run: |
          poetry run pytest -v

  release-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.base_ref }}

      - name: Install poetry
        run: pipx install poetry

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Poetry Install
        run: poetry install --only release
        
      - name: Semantic Release Preview
        run: |
          poetry run semantic-release -v --noop version --print

  release:
    needs: pytest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Poetry Install
        run: poetry install --with dev,release

      - name: Semantic Release
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release -v version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
